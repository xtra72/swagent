/////////////////////////////////////////////////////////////////////////////
// Includes
/////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <signal.h>
#include "Terminal.h"
#include "SLABHIDtoUART.h"
#include <unistd.h>
#include "agent.h"
#include "mqttclient.h"
#include "config.h"

/////////////////////////////////////////////////////////////////////////////
// Definitions
/////////////////////////////////////////////////////////////////////////////

#define SILABS_VID                      0x10c4
#define CP2110_PID                      0xea80
#define CP2114_PID                      0xeab0

#define ERROR_LEVEL_SUCCESS             0
#define ERROR_LEVEL_INVALID_ARG         1
#define ERROR_LEVEL_API_CODE            2

/////////////////////////////////////////////////////////////////////////////
// Namespaces
/////////////////////////////////////////////////////////////////////////////

using namespace std;

/////////////////////////////////////////////////////////////////////////////
// Static Global Variables
/////////////////////////////////////////////////////////////////////////////

// Globals used to store command line arguments
static string Serial; // -s SERIAL
static unsigned short Vid = SILABS_VID; // -vid VID
static unsigned short Pid = CP2110_PID; // -pid PID

// The connected HID UART device object
static HID_UART_DEVICE Device;

// Keep track of terminal mode and allow user to leave
// terminal mode using Ctrl-C
static bool InTerminalMode = false;

/////////////////////////////////////////////////////////////////////////////
// Static Global Functions
/////////////////////////////////////////////////////////////////////////////
#if 0
// Convert error level value to a printable string
static string DecodeErrorLevel(int errorLevel)
{
    string text;
    char temp[100];
    
    switch (errorLevel)
    {
    case ERROR_LEVEL_SUCCESS:           text = "Success"; break;
    case ERROR_LEVEL_INVALID_ARG:       text = "Invalid command line parameter"; break;
    case ERROR_LEVEL_API_CODE:          text = "API Error Code"; break;
    default:
        sprintf(temp, "Error Level (%d)", errorLevel);
        text = temp;
        break;
    }
    
    return text;
}

#endif
// Display a list of all available serial strings
static void PrintSerialList()
{
    HID_UART_STATUS status;
    DWORD numDevices = 0;
    HID_UART_DEVICE_STR serial;
    
    status = HidUart_GetNumDevices(&numDevices, Vid, Pid);
    
    if (status == HID_UART_SUCCESS)
    {
        printf("List of CP211x serial strings\n");
        printf("=============================\n");
        
        for (DWORD i = 0; i < numDevices; i++)
        {
            if (HidUart_GetString(i, Vid, Pid, serial, HID_UART_GET_SERIAL_STR) == HID_UART_SUCCESS)
            {
                printf("%s\n", serial);
            }
        }
    }
}


static HID_UART_STATUS DisconnectFromDevice()
{
    return HidUart_Close(Device);
}


/////////////////////////////////////////////////////////////////////////////
// Main
/////////////////////////////////////////////////////////////////////////////

// Handle interactive attention signal generated by the application user
// (ctrl-c)
void SigintHandler(int param)
{
    // If in terminal mode, then break out of terminal mode
    if (InTerminalMode)
    {
        InTerminalMode = false;
    }
    // Otherwise close the program
    else
    {
        DisconnectFromDevice();
        exit(ERROR_LEVEL_SUCCESS);
    }
}

int main(int argc, char* argv[])
{
    // Register for SIGINT events
    signal(SIGINT, SigintHandler);
    
	Config	config("/etc/swagent");
   
	if (!config.Load(argc, argv))
	{
		std::cerr << "Invalid config" << std::endl;
		return	0;
	}

	Config	trace_config;
	if (config.Find("trace", trace_config))
	{
		trace_master.Set(trace_config);
	}
	else
	{
		trace_master.SetOutputConsole();
		trace_master.SetEnable(true);
	}

	Agent	agent;
	Config	agent_config;
	if (config.Find("agent", agent_config))
	{
		agent.Set(agent_config);
	}

	agent.Start();
	
	while(true)
	{
		
	}

	agent.Stop();

    return ERROR_LEVEL_SUCCESS;
}
